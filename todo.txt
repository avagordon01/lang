make if, switch, for, while, block expressions not statements
    move the current_loop_{entry,exit,phi} from global context to function parameters
    then we can have easily nested loops

    todo type inference for if etc

    add switch break to the phi
    add for block value to the phi
    loop break should optionally return a value
        loops and blocks need phi instructions then
    if the last statement in a block is an expression its value should be returned

    loop return removes the need for some other less nice constructs
        python-like for/else
        multi level break
    switch continue should fallthrough

    not sure what for and while should return yet
    maybe vector or iterator like rust or python
user defined types
    for the mvp
        only named types, no anonymous types
            what if an accessor doesn't access all the way down to a primitive_type?
            have to generate a type_id for the intermediate type
        operators only for primitive types
        only type_def on primitive_types, no structs or arrays
